summary(EPI_data1)
EPI_data1 <- na.omit(EPI_data1)
boxplot(EPI_data1,scale = TRUE,center = TRUE)
EPI_data1[EPI_data1<=-9999] <- NA
summary(EPI_data1)
EPI_data1 <- na.omit(EPI_data1)
boxplot(EPI_data1,scale = TRUE,center = TRUE)
data <- as.numeric(EPI_data1$ACSAT.2009)
tf <- is.na(data)
data <- data[!tf]
fivenum(data,na.rm=TRUE)
min_data <- min(data,na.rm = TRUE)
min_data <- floor(min_data)
max_data <- max(data,na.rm = TRUE)
max_data <- ceiling(max_data)
hist(data, seq(min_data, max_data, 1.0), prob=TRUE)
lines(density(data,na.rm=TRUE,bw=1.)) # or try bw=“SJ”
lines(density(data,na.rm=TRUE,bw="SJ"))
rug(data)
plot(ecdf(data), do.points=FALSE, verticals=TRUE)
par(pty="s")
qqnorm(data); qqline(data)
x <- seq(min_data, max_data, 1.0)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for t dsn")
qqline(x)
data <- as.numeric(EPI_data1$ACSAT.2010)
tf <- is.na(data)
data <- data[!tf]
fivenum(data,na.rm=TRUE)
min_data <- min(data,na.rm = TRUE)
min_data <- floor(min_data)
max_data <- max(data,na.rm = TRUE)
max_data <- ceiling(max_data)
hist(data, seq(min_data, max_data, 1.0), prob=TRUE)
lines(density(data,na.rm=TRUE,bw=1.)) # or try bw=“SJ”
lines(density(data,na.rm=TRUE,bw="SJ"))
rug(data)
plot(ecdf(data), do.points=FALSE, verticals=TRUE)
par(pty="s")
qqnorm(data); qqline(data)
x <- seq(min_data, max_data, 1.0)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for t dsn")
qqline(x)
source("C:/code/CSCI4600S24_Ziyue_Zhao/Lab1/lab1.R", echo=TRUE)
data <- as.numeric(EPI_data$AIR_EWATER_E)
tf <- is.na(data)
data <- data[!tf]
fivenum(data,na.rm=TRUE)
min_data <- min(data,na.rm = TRUE)
data <- as.numeric(EPI_data$AIR_EWATER_E)
EPI_data <- read.csv("c:/code/CSCI4600S24_Ziyue_Zhao/Lab1/2010EPI_data.csv")
data <- as.numeric(EPI_data$AIR_EWATER_E)
tf <- is.na(data)
data <- data[!tf]
fivenum(data,na.rm=TRUE)
# we could not graph use EPI_data$AIR_EWATER_E, because all fivenum is NA
data <- as.numeric(EPI_data$AIR_EWATER_E)
tf <- is.na(data)
data <- data[!tf]
fivenum(data,na.rm=TRUE)
data <- EPI_data$BIODIVERSITY
exploration(data)
fitting(data)
data <- EPI_data$BIODIVERSITY
exploration(data)
View(EPI_data)
EPI_data <- read.csv("c:/code/CSCI4600S24_Ziyue_Zhao/Lab1/2010EPI_data.csv")
EPI_data_name <- EPI_data[1,]
EPI_data = EPI_data[-1,]
colnames(EPI_data) <- c(EPI_data_name)
summary(EPI_data)
attach(EPI_data)
# try to create a function to do all this things
exploration <- function(data){
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
fivenum(data,na.rm=TRUE)
min_data <- min(data,na.rm = TRUE)
min_data <- floor(min_data)
max_data <- max(data,na.rm = TRUE)
max_data <- ceiling(max_data)
hist(data, seq(min_data, max_data, 1.0), prob=TRUE)
lines(density(data,na.rm=TRUE,bw=1.)) # or try bw=“SJ”
lines(density(data,na.rm=TRUE,bw="SJ"))
rug(data)
}
fitting <- function(data){
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
fivenum(data,na.rm=TRUE)
min_data <- min(data,na.rm = TRUE)
min_data <- floor(min_data)
max_data <- max(data,na.rm = TRUE)
max_data <- ceiling(max_data)
plot(ecdf(data), do.points=FALSE, verticals=TRUE)
par(pty="s")
qqnorm(data); qqline(data)
x <- seq(min_data, max_data, 1.0)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for t dsn")
qqline(x)
}
# we could not graph use EPI_data$AIR_EWATER_E, because all fivenum is NA
data <- EPI_data$AIR_EWATER_E
exploration(data)
data <- EPI_data$BIODIVERSITY
exploration(data)
fitting(data)
source("C:/code/CSCI4600S24_Ziyue_Zhao/Lab1/lab1.R", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
changedata <- function(data){
colnames(data) <- data[5,]
data <- data[-c(1:5),]
}
dec_data <- read.csv("c:/code/Time_Series_Analysis/hw1/dec.csv",header = FALSE)
nov_data <- read.csv("c:/code/Time_Series_Analysis/hw1/nov.csv",header = FALSE)
oct_data <- read.csv("c:/code/Time_Series_Analysis/hw1/oct.csv",header = FALSE)
sep_data <- read.csv("c:/code/Time_Series_Analysis/hw1/sep.csv",header = FALSE)
aug_data <- read.csv("c:/code/Time_Series_Analysis/hw1/aug.csv",header = FALSE)
july_data <- read.csv("c:/code/Time_Series_Analysis/hw1/july.csv",header = FALSE)
june_data <- read.csv("c:/code/Time_Series_Analysis/hw1/june.csv",header = FALSE)
may_data <- read.csv("c:/code/Time_Series_Analysis/hw1/may.csv",header = FALSE)
april_data <- read.csv("c:/code/Time_Series_Analysis/hw1/april.csv",header = FALSE)
march_data <- read.csv("c:/code/Time_Series_Analysis/hw1/march.csv",header = FALSE)
feb_data <- read.csv("c:/code/Time_Series_Analysis/hw1/feb.csv",header = FALSE)
jan_data <- read.csv("c:/code/Time_Series_Analysis/hw1/jan.csv",header = FALSE)
dec_data <- changedata(dec_data)
nov_data <- changedata(nov_data)
oct_data <- changedata(oct_data)
sep_data <- changedata(sep_data)
aug_data <- changedata(aug_data)
july_data <- changedata(july_data)
june_data <- changedata(june_data)
may_data <- changedata(may_data)
april_data <- changedata(april_data)
march_data <- changedata(march_data)
feb_data <- changedata(feb_data)
jan_data <- changedata(jan_data)
total <- rbind(dec_data,nov_data,oct_data,sep_data,aug_data,july_data,june_data,may_data,
april_data,march_data,feb_data,jan_data)
total <- total[order(total$Date) , ]
total$Date <- as.numeric(total$Date)
total$Value <- as.numeric(total$Value)
total$Anomaly <- as.numeric(total$Anomaly)
View(total)
View(total)
install.packages("MASS")
library(MASS) # load the library MASS
attach(Boston) # attaching the dataset
?Boston # help function with "?"
head(Boston) # show the head of the dataset
dim(Boston) # dimensions of the dataset
names(Boston) # column names
str(Boston) # str function shows the structure of the dataset
nrow(Boston) # function shows the number of rows
ncol(Boston) # function shows the number of columns
summary(Boston) # summary() function shows the summary
statistics
summary(Boston$crim) # summary of the "crime" column in the
Boston dataset
matrix <- [-1,-2,-2,1]
matrix <- as.matrix(matrix,ncol = 2)
matrix <- c(-1,-2,-2,1)
matrix <- as.matrix(matrix,ncol = 2)
View(matrix)
View(matrix)
View(matrix)
matrix <- as.matrix(matrix,ncol = 2,nrow = 2)
matrix <- c(-1,-2,-2,1)
matrix <- as.matrix(matrix,ncol = 2,nrow = 2)
matrix <- c(-1,-2,-2,1)
matrix <- matrix(matrix,ncol = 2,nrow = 2)
matrix <- matrix(matrix,ncol = 2)
matrix <- c(-1,-2,-2,1)
matrix <- matrix(matrix,ncol = 2)
View(matrix)
matrix <- c(-1,-2,-2,1,2,-1,2,2,2,1,4,-1,-1,4)
matrix <- matrix(matrix,ncol = 2)
View(matrix)
View(matrix)
matrix <- c(-1,-2,-2,1,2,-1,2,2,2,1,4,-1,-1,4)
matrix <- matrix(matrix,ncol = 2)
fit <- kmeans(matrix, 2)
fit
View(matrix)
d <- dist(matrix,
method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
plot(fit) # display dendogram
groups <- cutree(fit, k=2) # cut tree into 5 clusters
group
print(group)
print(groups)
library(ggplot2)
EPI_data <- read.csv("c:/code/CSCI4600S24_Ziyue_Zhao/Lab1/2010EPI_data.csv")
EPI_data_name <- EPI_data[1,]
EPI_data = EPI_data[-1,]
colnames(EPI_data) <- c(EPI_data_name)
summary(EPI_data)
plot(ecdf(EPI), do.points=FALSE, verticals=TRUE)
epi_values <- EPI_data$EPI
epi_values <- as.numeric(epi_values)
tf <- is.na(EPI)
epi_values <- EPI_data$EPI
epi_values <- as.numeric(epi_values)
tf <- is.na(epi_values)
EPI <- epi_values[!tf]
plot(ecdf(EPI), do.points=FALSE, verticals=TRUE)
par(pty="s")
qqnorm(EPI); qqline(EPI)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for t dsn")
x<-seq(30,95,1)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for tdsn")
qqline(x)
plot(ecdf(EPI_data$EPI),do.points=FALSE,verticals = TRUE)
plot(ecdf(epi_values),do.points=FALSE,verticals = TRUE)
plot(ecdf(epi_values),do.points=TRUE,verticals = TRUE) # points arevisible on the plot.
par(pty="s")
help("qqnorm") # read the RStudio documentation for qqnorm
qqline(EPI_data$EPI) # adding the line on the Q-Q plot
help("qqplot") # read the RStudio documentation for qqplot
qqnorm(EPI_data$EPI)
qqnorm(epi_values)
qqline(epi_valuesI) # adding the line on the Q-Q plot
x <- seq(30,95,1)
x2 <-seq(30,95,2)
x2 <-seq(30,96,2)
qqplot(qt(ppoints(250),df=5),x, xlab = "Q-Q plot")
qqline(x)
# Base R plot
plot(mtcars$wt, mtcars$mpg)
# Loading the ggplot2 library
library(ggplot2)
# Using qplot (quick plot) from ggplot2
qplot(mtcars$wt, mtcars$mpg)
qplot(wt, mpg, data = mtcars)
# Base R plot
plot(mtcars$wt, mtcars$mpg)
# Loading the ggplot2 library
library(ggplot2)
# Using qplot (quick plot) from ggplot2
qplot(mtcars$wt, mtcars$mpg)
qplot(wt, mpg, data = mtcars)
# Using ggplot with geom_point
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Using ggplot with geom_point
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
qplot(wt, mpg, data = mtcars)
# Using ggplot with geom_point
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Base R plot with type="l" for lines
plot(pressure$temperature, pressure$pressure, type = "l")
points(pressure$temperature, pressure$pressure)
# Base R plot with lines and points in different colors
lines(pressure$temperature, pressure$pressure/2, col="red")
points(pressure$temperature, pressure$pressure/2, col="blue")
# Loading the ggplot2 library again (which is redundant if already loaded)
library(ggplot2)
# Using qplot with geom="line"
qplot(pressure$temperature, pressure$pressure, geom="line")
# Using ggplot to create a line plot
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point()
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point()
# Base R plot
plot(mtcars$wt, mtcars$mpg)
# Loading the ggplot2 library
library(ggplot2)
# Using qplot (quick plot) from ggplot2
qplot(mtcars$wt, mtcars$mpg)
qplot(wt, mpg, data = mtcars)
# Using ggplot with geom_point
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Base R plot with type="l" for lines
plot(pressure$temperature, pressure$pressure, type = "l")
points(pressure$temperature, pressure$pressure)
# Base R plot with lines and points in different colors
lines(pressure$temperature, pressure$pressure/2, col="red")
points(pressure$temperature, pressure$pressure/2, col="blue")
# Loading the ggplot2 library again (which is redundant if already loaded)
library(ggplot2)
# Using qplot with geom="line"
qplot(pressure$temperature, pressure$pressure, geom="line")
# Using ggplot to create a line plot
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point()
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point()
# Calling grid library
library(grid)
# Creating a rectangle
grid.rect(height=0.25,width=0.25)
# A rounded rectangle
grid.roundrect(height=0.2,width=0.2)
# A circle
grid.circle(r=0.1)
# Inserting text within the shape
grid.text("R Graphics")
# Drawing a polygon
grid.polygon()
# Calling grid library
library(grid)
# Creating a rectangle
grid.rect(height=0.25,width=0.25)
# A rounded rectangle
grid.roundrect(height=0.2,width=0.2)
# A circle
grid.circle(r=0.1)
# Inserting text within the shape
grid.text("R Graphics")
# Drawing a polygon
grid.polygon()
# data generation
# Set the seed to make the example reproducible
set.seed(1234)
incubation_period <-
c(rnorm(100,mean=10),rnorm(100,mean=15),rnorm(100,mean=5),rnorm(100,mean=20))
exposure_cat <- sort(rep(c(1:4),100))
dis_dat<-data.frame(incubation_period,exposure_cat)
# Producing histogram for each of the exposure category 1, 2, 3, and 4
# using traditional visualization code. The code below for
# panel histogram for different values of the variable
# exposure_cat. This code will produce a 2 x 2 matrix where
# we will have four different histograms.
op<-par(mfrow=c(2,2))
hist(dis_dat$incubation_period[dis_dat$exposure_cat==1])
hist(dis_dat$incubation_period[dis_dat$exposure_cat==1])
hist(dis_dat$incubation_period[dis_dat$exposure_cat==2])
hist(dis_dat$incubation_period[dis_dat$exposure_cat==3])
hist(dis_dat$incubation_period[dis_dat$exposure_cat==4])
library(lattice)
histogram(~incubation_period | factor(exposure_cat),
data=dis_dat)
plot(incubation_period ~ factor(exposure_cat), data=dis_dat)
plot(incubation_period ~ exposure_cat, data=dis_dat)
# loading ggplot2 library
library(ggplot2)
# creating a basic ggplot object
p <- ggplot(data=mtcars)
# Creating scatter plot of mpg and disp variable
p1 <- p+geom_point(aes(x=disp,y=mpg))
# creating line chart from the same ggplot object but
different
# geom function
p2 <- p+geom_line(aes(x=disp,y=mpg))
# creating bar chart of mpg variable
p3 <- p+geom_bar(aes(x=mpg))
# creating boxplot of mpg over gear
p4 <- p+geom_boxplot(aes(x=factor(gear),y=mpg))
# writing certain text into the scatter plot
p5 <- p1+geom_text(x=200,y=25,label="Scatter plot")
col="yellow" #Setting the color to yellow
plot(cars$dist~cars$speed)
plot(cars$dist~cars$speed)
plot(cars$dist~cars$speed, # y~x
plot(cars$dist~cars$speed, # y~x
main="Relationship between car distance & speed", # Plot Title
xlab="Speed (miles per hour)", #X axis title
ylab="Distance travelled (miles)", #Y axis title
xlim=c(0,30), #Set x axis limits from 0 to 30
ylim=c(0,140), #Set y axis limits from 0 to 140
xaxs="i", #Set x axis style as internal
yaxs="i", #Set y axis style as internal
col="red", #Set the color of plotting symbol to red
pch=19) #Set the plotting symbol to filled dots
plot(cars$dist~cars$speed, # y~x
plot(cars$dist~cars$speed, # y~x
main="Relationship between car distance & speed", # Plot Title
xlab="Speed (miles per hour)", #X axis title
ylab="Distance travelled (miles)", #Y axis title
xlim=c(0,30), #Set x axis limits from 0 to 30
ylim=c(0,140), #Set y axis limits from 0 to 140
xaxs="i", #Set x axis style as internal
yaxs="i", #Set y axis style as internal
col="red", #Set the color of plotting symbol to red
pch=19) #Set the plotting symbol to filled dots
points(cars$dist~cars$speed,pch=3)
# Creating Bar graphs
barplot(BOD$demand, names.arg = BOD$Time)
table(mtcars$cyl)
barplot(table(mtcars$cyl)) # generate a table of counts.
qplot(mtcars$cyl) # cyl is continuous here
qplot(factor(mtcars$cyl)) # treat cyl as discrete
# Bar graph of counts
qplot(factor(cyl), data = mtcars)
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar()
# Creating Histogram
# View the distribution of one-dimensional data with a histogram.
hist(mtcars$mpg)
hist(mtcars$mpg, breaks = 10) # specify approximate number of bins with breaks.
hist(mtcars$mpg, breaks = 5)
hist(mtcars$mpg, breaks = 12)
qplot(mpg, data = mtcars, binwidth=4)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth = 4)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth = 5)
# Creating Box-plot
plot(ToothGrowth$supp, ToothGrowth$len) # using plot() function and pass it a factor of x-values and a vector of y-values.
#Formula Syntax
boxplot(len ~ supp, data = ToothGrowth) # if the tow vectors are in the same dataframe, you can use the formula syntax. With this syntax you can combine two variables on the x-axis.
# put interaction of two variables on x-axis
boxplot(len ~ supp + dose, data = ToothGrowth)
# with ggplot2 you can get the same results above.
library(ggplot2)
qplot(ToothGrowth$supp, ToothGrowth$len, geom = "boxplot")
# if the two vectors are in the same dataframe, you can use the following syntax
qplot(supp, len, data = ToothGrowth, geom = "boxplot")
# in ggplot2, the above is equivalent to:
ggplot(ToothGrowth, aes(x=supp, y=len)) + geom_boxplot()
# Using three seperate vectors
qplot(interaction(ToothGrowth$supp, ToothGrowth$dose), ToothGrowth$len, geom = "boxplot")
# You can write the same thing above, get the columns from the dataframe
qplot(interaction(supp, dose), len, data = ToothGrowth, geom = "boxplot")
# Using ggplot() you can do the samething and it is equivalent to:
ggplot(ToothGrowth, aes(x=interaction(supp, dose), y=len)) + geom_boxplot()
# Calling grid library
library(grid)
# Base R plot
plot(mtcars$wt, mtcars$mpg)
# Loading the ggplot2 library
library(ggplot2)
# Using qplot (quick plot) from ggplot2
qplot(mtcars$wt, mtcars$mpg)
qplot(wt, mpg, data = mtcars)
# Using ggplot with geom_point
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Base R plot with type="l" for lines
plot(pressure$temperature, pressure$pressure, type = "l")
points(pressure$temperature, pressure$pressure)
# Base R plot with lines and points in different colors
lines(pressure$temperature, pressure$pressure/2, col="red")
points(pressure$temperature, pressure$pressure/2, col="blue")
# Loading the ggplot2 library again (which is redundant if already loaded)
library(ggplot2)
# Using qplot with geom="line"
qplot(pressure$temperature, pressure$pressure, geom="line")
# Using ggplot to create a line plot
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point()
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point()
# Creating Bar graphs
barplot(BOD$demand, names.arg = BOD$Time)
table(mtcars$cyl)
barplot(table(mtcars$cyl)) # generate a table of counts.
qplot(mtcars$cyl) # cyl is continuous here
qplot(factor(mtcars$cyl)) # treat cyl as discrete
# Bar graph of counts
qplot(factor(cyl), data = mtcars)
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar()
# Creating Histogram
# View the distribution of one-dimensional data with a histogram.
hist(mtcars$mpg)
hist(mtcars$mpg, breaks = 10) # specify approximate number of bins with breaks.
hist(mtcars$mpg, breaks = 5)
hist(mtcars$mpg, breaks = 12)
qplot(mpg, data = mtcars, binwidth=4)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth = 4)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth = 5)
# Creating Box-plot
plot(ToothGrowth$supp, ToothGrowth$len) # using plot() function and pass it a factor of x-values and a vector of y-values.
#Formula Syntax
boxplot(len ~ supp, data = ToothGrowth) # if the tow vectors are in the same dataframe, you can use the formula syntax. With this syntax you can combine two variables on the x-axis.
# put interaction of two variables on x-axis
boxplot(len ~ supp + dose, data = ToothGrowth)
# with ggplot2 you can get the same results above.
library(ggplot2)
qplot(ToothGrowth$supp, ToothGrowth$len, geom = "boxplot")
# if the two vectors are in the same dataframe, you can use the following syntax
qplot(supp, len, data = ToothGrowth, geom = "boxplot")
# in ggplot2, the above is equivalent to:
ggplot(ToothGrowth, aes(x=supp, y=len)) + geom_boxplot()
# Using three seperate vectors
qplot(interaction(ToothGrowth$supp, ToothGrowth$dose), ToothGrowth$len, geom = "boxplot")
# You can write the same thing above, get the columns from the dataframe
qplot(interaction(supp, dose), len, data = ToothGrowth, geom = "boxplot")
# Using ggplot() you can do the samething and it is equivalent to:
ggplot(ToothGrowth, aes(x=interaction(supp, dose), y=len)) + geom_boxplot()
# Calling grid library
library(grid)
# Creating a rectangle
grid.rect(height=0.25,width=0.25)
# A rounded rectangle
grid.roundrect(height=0.2,width=0.2)
# A circle
grid.circle(r=0.1)
# Inserting text within the shape
grid.text("R Graphics")
# Drawing a polygon
grid.polygon()
# data generation
# Set the seed to make the example reproducible
set.seed(1234)
incubation_period <-
c(rnorm(100,mean=10),rnorm(100,mean=15),rnorm(100,mean=5),rnorm(100,mean=20))
exposure_cat <- sort(rep(c(1:4),100))
dis_dat<-data.frame(incubation_period,exposure_cat)
# Producing histogram for each of the exposure category 1, 2, 3, and 4
# using traditional visualization code. The code below for
# panel histogram for different values of the variable
# exposure_cat. This code will produce a 2 x 2 matrix where
# we will have four different histograms.
op<-par(mfrow=c(2,2))
hist(dis_dat$incubation_period[dis_dat$exposure_cat==1])
hist(dis_dat$incubation_period[dis_dat$exposure_cat==2])
hist(dis_dat$incubation_period[dis_dat$exposure_cat==3])
hist(dis_dat$incubation_period[dis_dat$exposure_cat==4])
par(op)
library(lattice)
histogram(~incubation_period | factor(exposure_cat),
data=dis_dat)
plot(incubation_period ~ factor(exposure_cat), data=dis_dat)
plot(incubation_period ~ exposure_cat, data=dis_dat)
# loading ggplot2 library
library(ggplot2)
# creating a basic ggplot object
p <- ggplot(data=mtcars)
