x = "Airline",
y = "Average Delay (minutes)")
library(ggplot2)
ggplot(average_delay, aes(x = reorder(carrier, AverageDelay), y = AverageDelay)) +
geom_bar(stat = "identity") +
labs(title = "Average Departure Delay by Airline",
x = "Airline",
y = "Average Delay (minutes)")
ggplot(average_delay, aes(x = (carrier, AverageDelay), y = AverageDelay)) +
ggplot(average_delay, aes(x = AverageDelay, y = AverageDelay)) +
geom_bar(stat = "identity") +
labs(title = "Average Departure Delay by Airline",
x = "Airline",
y = "Average Delay (minutes)")
(carrier
## Exercise 1: Building Regression Models
# Load dataset for regression analysis.
data <- read.csv("c:/code/CSCI4600_hw/DA_Files/dataset_multipleRegression.csv")
# Create and predict with a linear model considering unemployment rate and high school graduates.
model1 <- lm(ROLL ~ UNEM + HGRAD, data = data)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
generate_data <- function(data){
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
mean_value<-mean(data, na.rm = TRUE)
median_value<-median(data, na.rm = TRUE)
mode_value<-getmode(data)
print(paste(summary(data)))
print(paste("Mean of WATER_E variable:", mean_value))
print(paste("Median of WATER_E variable:", median_value))
print(paste("Mode of WATER_E variable:", mode_value))
}
# read in data
EPI_data <- read.csv("c:/code/CSCI4600S24_Ziyue_Zhao/Lab1/2010EPI_data.csv")
EPI_data_name <- EPI_data[1,]
EPI_data = EPI_data[-1,]
colnames(EPI_data) <- c(EPI_data_name)
summary(EPI_data$AIR_E)
## Lab2 Part1a
# change the value to numeric and remove NaN
data1 <- as.numeric(EPI_data$AIR_E)
tf <- is.na(data1)
data1 <- data1[!tf]
summary(data1)
mean_value<-mean(data1, na.rm = TRUE)
median_value<-median(data1, na.rm = TRUE)
mode_value<-getmode(data1)
print(paste("Mean of AIR_E variable:", mean_value))
print(paste("Median of AIR_E variable:", median_value))
print(paste("Mode of AIR_E variable:", mode_value))
# change the value to numeric and remove NaN
data2 <- as.numeric(EPI_data$WATER_E)
tf <- is.na(data2)
data2 <- data2[!tf]
summary(data2)
mean_value<-mean(data2, na.rm = TRUE)
median_value<-median(data2, na.rm = TRUE)
mode_value<-getmode(data2)
print(paste("Mean of WATER_E variable:", mean_value))
print(paste("Median of WATER_E variable:", median_value))
print(paste("Mode of WATER_E variable:", mode_value))
# draw Box plots for AIR_E variable
boxplot(data1)
# draw Box plots for WATER_E variable
boxplot(data2)
# draw two box plot on the same graph
combined_data <- list(Group1 = data1, Group2 = data2)
boxplot(combined_data,
main = "Boxplot for Two Groups",
xlab = "Group",
ylab = "Values",
col = c("red", "blue"),
names = c("Group 1", "Group 2"))
#  Generate Central Tendency values for NOX_pt & SO2_pt variable
generate_data(EPI_data$NOX_pt)
generate_data(EPI_data$SO2_pt)
# Generate the Boxplots for OZONE_pt variable
data_OZONE_pt <- as.numeric(EPI_data$OZONE_pt)
tf <- is.na(data_OZONE_pt)
data_OZONE_pt <- data_OZONE_pt[!tf]
summary(data_OZONE_pt)
boxplot(data_OZONE_pt)
# Generate the Boxplots for WQI_pt variable
data_WQI_pt <- as.numeric(EPI_data$WQI_pt)
tf <- is.na(data_WQI_pt)
data_WQI_pt <- data_WQI_pt[!tf]
summary(data_WQI_pt)
boxplot(data_WQI_pt)
# draw box plot for both of them
boxplot(data_OZONE_pt,data_WQI_pt)
# Generate Central Tendency values for CLIMATE & AGRICULTUREvariable
generate_data(EPI_data$CLIMATE)
generate_data(EPI_data$AGRICULTURE)
# Generate the Boxplots for FISHERIES variable
str(EPI_data$FISHERIES)
data_FISHERIES <- as.numeric(EPI_data$FISHERIES)
tf <- is.na(data_FISHERIES)
data_FISHERIES <- data_FISHERIES[!tf]
summary(data_FISHERIES)
boxplot(data_FISHERIES)
# Generate the Boxplots for NMVOC_pt variable
data_NMVOC_pt <- as.numeric(EPI_data$NMVOC_pt)
tf <- is.na(data_NMVOC_pt)
data_NMVOC_pt <- data_NMVOC_pt[!tf]
summary(data_NMVOC_pt)
boxplot(data_NMVOC_pt)
# draw box plot for both of them
boxplot(data_FISHERIES,data_NMVOC_pt)
# data boxplot(ENVHEALTH,ECOSYSTEM)
data_ENVHEALTH <- as.numeric(EPI_data$ENVHEALTH)
tf <- is.na(data_ENVHEALTH)
data_ENVHEALTH <- data_ENVHEALTH[!tf]
summary(data_ENVHEALTH)
boxplot(data_ENVHEALTH)
data_ECOSYSTEM <- as.numeric(EPI_data$ECOSYSTEM)
tf <- is.na(data_ECOSYSTEM)
data_ECOSYSTEM <- data_ECOSYSTEM[!tf]
summary(data_ECOSYSTEM)
boxplot(data_ECOSYSTEM)
boxplot(data_ENVHEALTH,data_ECOSYSTEM)
qqplot(data_ENVHEALTH,data_ECOSYSTEM)
##Lab2 Part1b:Regression
EPI_data1 <- read.csv("c:/code/CSCI4600_hw/DA_Files/EPI/EPI_data.csv")
boxplot(ENVHEALTH,DALY,AIR_H,WATER_H)
lmENVH<-lm(ENVHEALTH ~ DALY + AIR_H + WATER_H)
cENVH<-coef(lmENVH)
length(EPI_data1$ENVHEALTH)
DALYNEW<-c(seq(5,95,(95-5)/(231-1)))
AIR_HNEW<-c(seq(5,95,(95-5)/(231-1)))
WATER_HNEW<-c(seq(5,95,(95-5)/(231-1)))
NEW<-data.frame(DALYNEW,AIR_HNEW,WATER_HNEW)
pENV<-predict(lmENVH, NEW, interval="prediction")
cENV<-predict(lmENVH, NEW, interval="confidence")
Model1 <- lm(AIR_E ~ DALY+AIR_H+WATER_H)
cENVH<-coef(Model1)
length(EPI_data1$AIR_E)
DALYNEW<-c(seq(5,95,(95-5)/(231-1)))
AIR_HNEW<-c(seq(5,95,(95-5)/(231-1)))
WATER_HNEW<-c(seq(5,95,(95-5)/(231-1)))
NEW<-data.frame(DALYNEW,AIR_HNEW,WATER_HNEW)
pENV<-predict(Model1, NEW, interval="prediction")
cENV<-predict(Model1, NEW, interval="confidence")
shapiro.test(pENV)
Model1 <- lm(AIR_E ~ DALY+AIR_H+WATER_H)
##Lab2 Part1b:Regression
EPI_data1 <- read.csv("c:/code/CSCI4600_hw/DA_Files/EPI/EPI_data.csv")
boxplot(ENVHEALTH,DALY,AIR_H,WATER_H)
##Lab2 Part1b:Regression
EPI_data1 <- read.csv("c:/code/CSCI4600_hw/DA_Files/EPI/EPI_data.csv")
boxplot(EPI_data1$ENVHEALTH,EPI_data1$DALY,EPI_data1$AIR_H,EPI_data1$WATER_H)
lmENVH<-lm(ENVHEALTH ~ DALY + AIR_H + WATER_H)
lmENVH<-lm(ENVHEALTH ~ DALY + AIR_H + WATER_H, data = EPI_data1)
cENVH<-coef(lmENVH)
length(EPI_data1$ENVHEALTH)
DALYNEW<-c(seq(5,95,(95-5)/(231-1)))
AIR_HNEW<-c(seq(5,95,(95-5)/(231-1)))
WATER_HNEW<-c(seq(5,95,(95-5)/(231-1)))
NEW<-data.frame(DALYNEW,AIR_HNEW,WATER_HNEW)
pENV<-predict(lmENVH, NEW, interval="prediction")
boxplot(EPI_data1$ENVHEALTH,EPI_data1$DALY,EPI_data1$AIR_H,EPI_data1$WATER_H)
lmENVH<-lm(ENVHEALTH ~ DALY + AIR_H + WATER_H, data = EPI_data1)
cENVH<-coef(lmENVH)
length(EPI_data1$ENVHEALTH)
DALYNEW<-c(seq(5,95,(95-5)/(231-1)))
AIR_HNEW<-c(seq(5,95,(95-5)/(231-1)))
WATER_HNEW<-c(seq(5,95,(95-5)/(231-1)))
NEW<-data.frame(DALYNEW,AIR_HNEW,WATER_HNEW)
pENV<-predict(lmENVH, NEW, interval="prediction")
NEW<-data.frame(EPI_data1$DALYNEW,EPI_data1$AIR_HNEW,EPI_data1$WATER_HNEW)
pENV<-predict(lmENVH, NEW, interval="prediction")
lmENVH<-lm(EPI_data1$ENVHEALTH ~ EPI_data1$DALY + EPI_data1$AIR_H + EPI_data1$WATER_H)
cENVH<-coef(lmENVH)
length(EPI_data1$ENVHEALTH)
DALYNEW<-c(seq(5,95,(95-5)/(231-1)))
AIR_HNEW<-c(seq(5,95,(95-5)/(231-1)))
WATER_HNEW<-c(seq(5,95,(95-5)/(231-1)))
NEW<-data.frame(EPI_data1$DALYNEW,EPI_data1$AIR_HNEW,EPI_data1$WATER_HNEW)
pENV<-predict(lmENVH, NEW, interval="prediction")
cENV<-predict(lmENVH, NEW, interval="confidence")
Model1 <- lm(AIR_E ~ DALY+AIR_H+WATER_H)
Model1 <- lm(EPI_data1$AIR_E ~ EPI_data1$DALY+EPI_data1$AIR_H+EPI_data1$WATER_H)
cENVH<-coef(Model1)
length(EPI_data1$AIR_E)
DALYNEW<-c(seq(5,95,(95-5)/(231-1)))
AIR_HNEW<-c(seq(5,95,(95-5)/(231-1)))
WATER_HNEW<-c(seq(5,95,(95-5)/(231-1)))
NEW<-data.frame(DALYNEW,AIR_HNEW,WATER_HNEW)
pENV<-predict(Model1, NEW, interval="prediction")
cENV<-predict(Model1, NEW, interval="confidence")
shapiro.test(pENV)
##Lab2 Part1b:Regression
EPI_data1 <- read.csv("c:/code/CSCI4600_hw/DA_Files/EPI/EPI_data.csv")
boxplot(ENVHEALTH,DALY,AIR_H,WATER_H)
lmENVH<-lm(ENVHEALTH ~ DALY + AIR_H + WATER_H)
cENVH<-coef(lmENVH)
boxplot(EPI_data1$ENVHEALTH,EPI_data1$DALY,EPI_data1$AIR_H,EPI_data1$WATER_H)
lmENVH<-lm(EPI_data1$ENVHEALTH ~ EPI_data1$DALY + EPI_data1$AIR_H + EPI_data1$WATER_H)
cENVH<-coef(lmENVH)
length(EPI_data1$ENVHEALTH)
DALYNEW<-c(seq(5,95,(95-5)/(231-1)))
AIR_HNEW<-c(seq(5,95,(95-5)/(231-1)))
WATER_HNEW<-c(seq(5,95,(95-5)/(231-1)))
NEW<-data.frame(DALYNEW,AIR_HNEW,WATER_HNEW)
pENV<-predict(lmENVH, NEW, interval="prediction")
cENV<-predict(lmENVH, NEW, interval="confidence")
Model1 <- lm(AIR_E ~ DALY+AIR_H+WATER_H)
Model1 <- lm(EPI_data1$AIR_E ~ EPI_data1$DALY+EPI_data1$AIR_H+EPI_data1$WATER_H)
cENVH<-coef(Model1)
length(EPI_data1$AIR_E)
DALYNEW<-c(seq(5,95,(95-5)/(231-1)))
AIR_HNEW<-c(seq(5,95,(95-5)/(231-1)))
WATER_HNEW<-c(seq(5,95,(95-5)/(231-1)))
NEW<-data.frame(DALYNEW,AIR_HNEW,WATER_HNEW)
pENV<-predict(Model1, NEW, interval="prediction")
cENV<-predict(Model1, NEW, interval="confidence")
shapiro.test(pENV)
## Lab2 Part1c : ENVHEALTH/ ECOSYSTEM
shapiro.test(ENVHEALTH)
data <- EPI_data$ENVHEALTH
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
## Lab2 Part1c : ENVHEALTH/ ECOSYSTEM
shapiro.test(EPI_data1$ENVHEALTH)
shapiro.test(EPI_data1$ECOSYSTEM)
data <- EPI_data$ENVHEALTH
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
data <- EPI_data$DALY
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
data <- EPI_data$AIR_H
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
data <- EPI_data$WATER_H
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
data <- EPI_data1$ENVHEALTH
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
data <- EPI_data1$DALY
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
data <- EPI_data1$AIR_H
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
data <- EPI_data1$WATER_H
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
cENVH<-coef(Model1)
Model1 <- lm(EPI_data1$AIR_E ~ EPI_data1$DALY+EPI_data1$AIR_H+EPI_data1$WATER_H)
cENVH<-coef(Model1)
length(EPI_data1$AIR_E)
DALYNEW<-c(seq(5,95,(95-5)/(231-1)))
AIR_HNEW<-c(seq(5,95,(95-5)/(231-1)))
WATER_HNEW<-c(seq(5,95,(95-5)/(231-1)))
NEW<-data.frame(DALYNEW,AIR_HNEW,WATER_HNEW)
pENV<-predict(Model1, NEW, interval="prediction")
cENV<-predict(Model1, NEW, interval="confidence")
shapiro.test(pENV)
Model2 <- lm(CLIMATE ~DALY+AIR_H+WATER_H)
cENVH<-coef(Model2)
Model2 <- lm(EPI_data1$CLIMATE ~EPI_data1$DALY+EPI_data1$AIR_H+EPI_data1$WATER_H)
cENVH<-coef(Model2)
length(EPI_data1$AIR_E)
DALYNEW<-c(seq(5,95,(95-5)/(231-1)))
AIR_HNEW<-c(seq(5,95,(95-5)/(231-1)))
WATER_HNEW<-c(seq(5,95,(95-5)/(231-1)))
NEW<-data.frame(DALYNEW,AIR_HNEW,WATER_HNEW)
pENV<-predict(Model2, NEW, interval="prediction")
cENV<-predict(Model2, NEW, interval="confidence")
NEW<-data.frame(EPI_data1$DALYNEW,EPI_data1$AIR_HNEW,EPI_data1$WATER_HNEW)
pENV<-predict(Model2, NEW, interval="prediction")
cENV<-predict(Model2, NEW, interval="confidence")
shapiro.test(pENV)
## Lab2 Part1c : ENVHEALTH/ ECOSYSTEM
shapiro.test(EPI_data1$ENVHEALTH)
shapiro.test(EPI_data1$ECOSYSTEM)
data <- EPI_data$ENVHEALTH
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
data <- EPI_data$DALY
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
data <- EPI_data$AIR_H
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
data <- EPI_data$WATER_H
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
data <- EPI_data1$ENVHEALTH
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
data <- EPI_data1$DALY
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
data <- EPI_data1$AIR_H
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
data <- EPI_data1$WATER_H
data <- as.numeric(data)
tf <- is.na(data)
data <- data[!tf]
length(data)
shapiro.test(data)
# abalone dataset from UCI repository
# reading the dataset from UCI repository URL
abalone <- read.csv(url("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"), header = FALSE,
sep = ",")
# Column names
colnames(abalone) <- c("sex", "length", 'diameter', 'height', 'whole_weight', 'shucked_wieght', 'viscera_wieght', 'shell_weight',
'rings' )
# summary on abalone
summary(abalone)
# structure of the abalone data
str(abalone)
# summary of the abalone rings column
summary(abalone$rings)
# As shown above, the “rings” variable has a range between 1-29.
# This is the variable that we want to predict, and predicting this many levels
# might not give us the insight we’re looking for.
# For now, we’ll break the rings variable
# into 3 levels" “young” for abalones less than 8, “adult” for abalones between 8-11,
# and “old” for abalones older than 11.
abalone$rings <- as.numeric(abalone$rings)
abalone$rings <- cut(abalone$rings, br=c(-1,8,11,35), labels = c("young", 'adult', 'old'))
abalone$rings <- as.factor(abalone$rings)
summary(abalone$rings)
# remove the "sex" variable in abalone, because KNN requires all numeric variables for prediction
# z <- abalone
aba <- abalone
aba$sex <- NULL
# normalize the data using min max normalization
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
aba[1:7] <- as.data.frame(lapply(aba[1:7], normalize))
summary(aba$shucked_wieght)
# After Normalization, each variable has a min of 0 and a max of 1.
# in other words, values are in the range from 0 to 1.
# We’ll now split the data into training and testing sets.
ind <- sample(2, nrow(aba), replace=TRUE, prob=c(0.7, 0.3))
KNNtrain <- aba[ind==1,]
KNNtest <- aba[ind==2,]
sqrt(2918)
# make k equal to the square root of 2918, the number of observations in the training set.
# sqrt(2918) ~= 54.01852 round it to 55 and use k = 55 # We usually take an Odd number for k value,
# knn model
# knn() is in the "class" library. Make sure to install it first on your RStudio.
library(class)
help("knn") # Read the knn documentation on RStudio.
KNNpred <- knn(train = KNNtrain[1:7], test = KNNtest[1:7], cl = KNNtrain$rings, k = 55)
KNNpred
table(KNNpred)
# iris dataset is from UCI ML repository.
library(ggplot2) # we will use ggplot2 to visualize the data.
head(iris) # first 6 rows of the
str(iris) # take a look at the structure of the iris data using str() function in R.
# dataset has 150 observations equally distributed observations among
# the three species: Setosa, Versicolor and Verginica.
summary(iris) # summary statistics of all the 4 variables Sepal.Length,Sepal.Width,
# Petal.Length and Petal.Width
help("sapply")
sapply(iris[,-5], var)
summary(iris)
# plot Sepal.Length Vs Sepal.Width using ggplot
ggplot(iris,aes(x = Sepal.Length, y = Sepal.Width, col= Species)) + geom_point()
# plot Petal.Length Vs Sepal.Width using ggplot
ggplot(iris,aes(x = Petal.Length, y = Petal.Width, col= Species)) + geom_point()
# kmeans clustering
# Read the documentation for kmeans() function
# https://stat.ethz.ch/R-manual/R-devel/library/stats/html/kmeans.html
set.seed(300)
k.max <- 12
# tot.withinss = Total within-cluster sum of square
# iter.max = the maximum number of iterations allowed
# nstart = if centers is a number, how many random sets should be chosen.
wss<- sapply(1:k.max,function(k){kmeans(iris[,3:4],k,nstart = 20,iter.max = 20)$tot.withinss})
wss # within sum of squares.
plot(1:k.max,wss, type= "b", xlab = "Number of clusters(k)", ylab = "Within cluster sum of squares")
icluster <- kmeans(iris[,3:4],3,nstart = 20)
table(icluster$cluster,iris$Species)
# In the table we can see that most of the observations have been clustered correctly
# In the table we can see that most of the observations have been clustered correctly
# however, 2 of the versicolor have been put in the cluster with all the virginica
# In the table we can see that most of the observations have been clustered correctly
# however, 2 of the versicolor have been put in the cluster with all the virginica
# and 4 of the verginica have been put in cluster 3 which mostly has versicolor.
# Classification ctrees
# iris data set
# Install the following libararies/packages
library(rpart)
library(rpart.plot)
# we will be using the iris dataset
iris
dim(iris) # check the dimensions of the iris dataset
# creating a sample from the iris dataset
s_iris <- sample(150,100)
s_iris
# creat testing and training sets
iris_train <-iris[s_iris,]
iris_test <-iris[-s_iris,]
dim(iris_test)
dim(iris_train)
# generate the decision tree model
dectionTreeModel <- rpart(Species~., iris_train, method = "class")
dectionTreeModel
#plotting the decision tree model using rpart.plot() function
rpart.plot(dectionTreeModel)
# In the table we can see that most of the observations have been clustered correctly
# however, 2 of the versicolor have been put in the cluster with all the virginica
# and 4 of the verginica have been put in cluster 3 which mostly has versicolor.
# Classification ctrees
# iris data set
# Install the following libararies/packages
library(rpart)
library(rpart.plot)
# we will be using the iris dataset
iris
dim(iris) # check the dimensions of the iris dataset
# creating a sample from the iris dataset
s_iris <- sample(150,100)
s_iris
# creat testing and training sets
iris_train <-iris[s_iris,]
iris_test <-iris[-s_iris,]
dim(iris_test)
dim(iris_train)
# generate the decision tree model
dectionTreeModel <- rpart(Species~., iris_train, method = "class")
dectionTreeModel
#plotting the decision tree model using rpart.plot() function
rpart.plot(dectionTreeModel)
# In the table we can see that most of the observations have been clustered correctly
# however, 2 of the versicolor have been put in the cluster with all the virginica
# and 4 of the verginica have been put in cluster 3 which mostly has versicolor.
# Classification ctrees
# iris data set
# Install the following libararies/packages
library(rpart)
library(rpart.plot)
install.packages(rpart.plot)
install.packages(rpart.plot)
install.packages('rpart.plot')
library(rpart.plot)
# we will be using the iris dataset
iris
dim(iris) # check the dimensions of the iris dataset
# creating a sample from the iris dataset
s_iris <- sample(150,100)
s_iris
# creat testing and training sets
iris_train <-iris[s_iris,]
iris_test <-iris[-s_iris,]
dim(iris_test)
dim(iris_train)
# generate the decision tree model
dectionTreeModel <- rpart(Species~., iris_train, method = "class")
dectionTreeModel
#plotting the decision tree model using rpart.plot() function
rpart.plot(dectionTreeModel)
