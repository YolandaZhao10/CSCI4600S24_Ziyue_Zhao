points(pressure$temperature, pressure$pressure)
# Base R plot with lines and points in different colors
lines(pressure$temperature, pressure$pressure/2, col="red")
points(pressure$temperature, pressure$pressure/2, col="blue")
# Loading the ggplot2 library again (which is redundant if already loaded)
library(ggplot2)
# Using qplot with geom="line"
qplot(pressure$temperature, pressure$pressure, geom="line")
# Using ggplot to create a line plot
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point()
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point()
# Base R plot
plot(mtcars$wt, mtcars$mpg)
# Loading the ggplot2 library
library(ggplot2)
# Using qplot (quick plot) from ggplot2
qplot(mtcars$wt, mtcars$mpg)
qplot(wt, mpg, data = mtcars)
# Using ggplot with geom_point
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Base R plot with type="l" for lines
plot(pressure$temperature, pressure$pressure, type = "l")
points(pressure$temperature, pressure$pressure)
# Base R plot with lines and points in different colors
lines(pressure$temperature, pressure$pressure/2, col="red")
points(pressure$temperature, pressure$pressure/2, col="blue")
# Loading the ggplot2 library again (which is redundant if already loaded)
library(ggplot2)
# Using qplot with geom="line"
qplot(pressure$temperature, pressure$pressure, geom="line")
# Using ggplot to create a line plot
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point()
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point()
# Calling grid library
library(grid)
# Creating a rectangle
grid.rect(height=0.25,width=0.25)
# A rounded rectangle
grid.roundrect(height=0.2,width=0.2)
# A circle
grid.circle(r=0.1)
# Inserting text within the shape
grid.text("R Graphics")
# Drawing a polygon
grid.polygon()
# Calling grid library
library(grid)
# Creating a rectangle
grid.rect(height=0.25,width=0.25)
# A rounded rectangle
grid.roundrect(height=0.2,width=0.2)
# A circle
grid.circle(r=0.1)
# Inserting text within the shape
grid.text("R Graphics")
# Drawing a polygon
grid.polygon()
# data generation
# Set the seed to make the example reproducible
set.seed(1234)
incubation_period <-
c(rnorm(100,mean=10),rnorm(100,mean=15),rnorm(100,mean=5),rnorm(100,mean=20))
exposure_cat <- sort(rep(c(1:4),100))
dis_dat<-data.frame(incubation_period,exposure_cat)
# Producing histogram for each of the exposure category 1, 2, 3, and 4
# using traditional visualization code. The code below for
# panel histogram for different values of the variable
# exposure_cat. This code will produce a 2 x 2 matrix where
# we will have four different histograms.
op<-par(mfrow=c(2,2))
hist(dis_dat$incubation_period[dis_dat$exposure_cat==1])
hist(dis_dat$incubation_period[dis_dat$exposure_cat==1])
hist(dis_dat$incubation_period[dis_dat$exposure_cat==2])
hist(dis_dat$incubation_period[dis_dat$exposure_cat==3])
hist(dis_dat$incubation_period[dis_dat$exposure_cat==4])
library(lattice)
histogram(~incubation_period | factor(exposure_cat),
data=dis_dat)
plot(incubation_period ~ factor(exposure_cat), data=dis_dat)
plot(incubation_period ~ exposure_cat, data=dis_dat)
# loading ggplot2 library
library(ggplot2)
# creating a basic ggplot object
p <- ggplot(data=mtcars)
# Creating scatter plot of mpg and disp variable
p1 <- p+geom_point(aes(x=disp,y=mpg))
# creating line chart from the same ggplot object but
different
# geom function
p2 <- p+geom_line(aes(x=disp,y=mpg))
# creating bar chart of mpg variable
p3 <- p+geom_bar(aes(x=mpg))
# creating boxplot of mpg over gear
p4 <- p+geom_boxplot(aes(x=factor(gear),y=mpg))
# writing certain text into the scatter plot
p5 <- p1+geom_text(x=200,y=25,label="Scatter plot")
col="yellow" #Setting the color to yellow
plot(cars$dist~cars$speed)
plot(cars$dist~cars$speed)
plot(cars$dist~cars$speed, # y~x
plot(cars$dist~cars$speed, # y~x
main="Relationship between car distance & speed", # Plot Title
xlab="Speed (miles per hour)", #X axis title
ylab="Distance travelled (miles)", #Y axis title
xlim=c(0,30), #Set x axis limits from 0 to 30
ylim=c(0,140), #Set y axis limits from 0 to 140
xaxs="i", #Set x axis style as internal
yaxs="i", #Set y axis style as internal
col="red", #Set the color of plotting symbol to red
pch=19) #Set the plotting symbol to filled dots
plot(cars$dist~cars$speed, # y~x
plot(cars$dist~cars$speed, # y~x
main="Relationship between car distance & speed", # Plot Title
xlab="Speed (miles per hour)", #X axis title
ylab="Distance travelled (miles)", #Y axis title
xlim=c(0,30), #Set x axis limits from 0 to 30
ylim=c(0,140), #Set y axis limits from 0 to 140
xaxs="i", #Set x axis style as internal
yaxs="i", #Set y axis style as internal
col="red", #Set the color of plotting symbol to red
pch=19) #Set the plotting symbol to filled dots
points(cars$dist~cars$speed,pch=3)
# Creating Bar graphs
barplot(BOD$demand, names.arg = BOD$Time)
table(mtcars$cyl)
barplot(table(mtcars$cyl)) # generate a table of counts.
qplot(mtcars$cyl) # cyl is continuous here
qplot(factor(mtcars$cyl)) # treat cyl as discrete
# Bar graph of counts
qplot(factor(cyl), data = mtcars)
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar()
# Creating Histogram
# View the distribution of one-dimensional data with a histogram.
hist(mtcars$mpg)
hist(mtcars$mpg, breaks = 10) # specify approximate number of bins with breaks.
hist(mtcars$mpg, breaks = 5)
hist(mtcars$mpg, breaks = 12)
qplot(mpg, data = mtcars, binwidth=4)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth = 4)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth = 5)
# Creating Box-plot
plot(ToothGrowth$supp, ToothGrowth$len) # using plot() function and pass it a factor of x-values and a vector of y-values.
#Formula Syntax
boxplot(len ~ supp, data = ToothGrowth) # if the tow vectors are in the same dataframe, you can use the formula syntax. With this syntax you can combine two variables on the x-axis.
# put interaction of two variables on x-axis
boxplot(len ~ supp + dose, data = ToothGrowth)
# with ggplot2 you can get the same results above.
library(ggplot2)
qplot(ToothGrowth$supp, ToothGrowth$len, geom = "boxplot")
# if the two vectors are in the same dataframe, you can use the following syntax
qplot(supp, len, data = ToothGrowth, geom = "boxplot")
# in ggplot2, the above is equivalent to:
ggplot(ToothGrowth, aes(x=supp, y=len)) + geom_boxplot()
# Using three seperate vectors
qplot(interaction(ToothGrowth$supp, ToothGrowth$dose), ToothGrowth$len, geom = "boxplot")
# You can write the same thing above, get the columns from the dataframe
qplot(interaction(supp, dose), len, data = ToothGrowth, geom = "boxplot")
# Using ggplot() you can do the samething and it is equivalent to:
ggplot(ToothGrowth, aes(x=interaction(supp, dose), y=len)) + geom_boxplot()
# Calling grid library
library(grid)
# Base R plot
plot(mtcars$wt, mtcars$mpg)
# Loading the ggplot2 library
library(ggplot2)
# Using qplot (quick plot) from ggplot2
qplot(mtcars$wt, mtcars$mpg)
qplot(wt, mpg, data = mtcars)
# Using ggplot with geom_point
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Base R plot with type="l" for lines
plot(pressure$temperature, pressure$pressure, type = "l")
points(pressure$temperature, pressure$pressure)
# Base R plot with lines and points in different colors
lines(pressure$temperature, pressure$pressure/2, col="red")
points(pressure$temperature, pressure$pressure/2, col="blue")
# Loading the ggplot2 library again (which is redundant if already loaded)
library(ggplot2)
# Using qplot with geom="line"
qplot(pressure$temperature, pressure$pressure, geom="line")
# Using ggplot to create a line plot
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point()
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point()
# Creating Bar graphs
barplot(BOD$demand, names.arg = BOD$Time)
table(mtcars$cyl)
barplot(table(mtcars$cyl)) # generate a table of counts.
qplot(mtcars$cyl) # cyl is continuous here
qplot(factor(mtcars$cyl)) # treat cyl as discrete
# Bar graph of counts
qplot(factor(cyl), data = mtcars)
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar()
# Creating Histogram
# View the distribution of one-dimensional data with a histogram.
hist(mtcars$mpg)
hist(mtcars$mpg, breaks = 10) # specify approximate number of bins with breaks.
hist(mtcars$mpg, breaks = 5)
hist(mtcars$mpg, breaks = 12)
qplot(mpg, data = mtcars, binwidth=4)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth = 4)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth = 5)
# Creating Box-plot
plot(ToothGrowth$supp, ToothGrowth$len) # using plot() function and pass it a factor of x-values and a vector of y-values.
#Formula Syntax
boxplot(len ~ supp, data = ToothGrowth) # if the tow vectors are in the same dataframe, you can use the formula syntax. With this syntax you can combine two variables on the x-axis.
# put interaction of two variables on x-axis
boxplot(len ~ supp + dose, data = ToothGrowth)
# with ggplot2 you can get the same results above.
library(ggplot2)
qplot(ToothGrowth$supp, ToothGrowth$len, geom = "boxplot")
# if the two vectors are in the same dataframe, you can use the following syntax
qplot(supp, len, data = ToothGrowth, geom = "boxplot")
# in ggplot2, the above is equivalent to:
ggplot(ToothGrowth, aes(x=supp, y=len)) + geom_boxplot()
# Using three seperate vectors
qplot(interaction(ToothGrowth$supp, ToothGrowth$dose), ToothGrowth$len, geom = "boxplot")
# You can write the same thing above, get the columns from the dataframe
qplot(interaction(supp, dose), len, data = ToothGrowth, geom = "boxplot")
# Using ggplot() you can do the samething and it is equivalent to:
ggplot(ToothGrowth, aes(x=interaction(supp, dose), y=len)) + geom_boxplot()
# Calling grid library
library(grid)
# Creating a rectangle
grid.rect(height=0.25,width=0.25)
# A rounded rectangle
grid.roundrect(height=0.2,width=0.2)
# A circle
grid.circle(r=0.1)
# Inserting text within the shape
grid.text("R Graphics")
# Drawing a polygon
grid.polygon()
# data generation
# Set the seed to make the example reproducible
set.seed(1234)
incubation_period <-
c(rnorm(100,mean=10),rnorm(100,mean=15),rnorm(100,mean=5),rnorm(100,mean=20))
exposure_cat <- sort(rep(c(1:4),100))
dis_dat<-data.frame(incubation_period,exposure_cat)
# Producing histogram for each of the exposure category 1, 2, 3, and 4
# using traditional visualization code. The code below for
# panel histogram for different values of the variable
# exposure_cat. This code will produce a 2 x 2 matrix where
# we will have four different histograms.
op<-par(mfrow=c(2,2))
hist(dis_dat$incubation_period[dis_dat$exposure_cat==1])
hist(dis_dat$incubation_period[dis_dat$exposure_cat==2])
hist(dis_dat$incubation_period[dis_dat$exposure_cat==3])
hist(dis_dat$incubation_period[dis_dat$exposure_cat==4])
par(op)
library(lattice)
histogram(~incubation_period | factor(exposure_cat),
data=dis_dat)
plot(incubation_period ~ factor(exposure_cat), data=dis_dat)
plot(incubation_period ~ exposure_cat, data=dis_dat)
# loading ggplot2 library
library(ggplot2)
# creating a basic ggplot object
p <- ggplot(data=mtcars)
days = c('Mon', 'Tue','Wed','Thur','Fri','Sat','Sun') #  days
temp <- c(28,30.5,32,31.2,29.3,27.9,26.4) # Temperature in F' during the winter :)
snowed <- c('T','T','F','F','T','T','F') # This is what I want : Snowed on that day: T = TRUE, F= FALSE
snowed
class(snowed)
help("data.frame")
RPI_Weather_Week <- data.frame(days,temp,snowed) # creating the dataframe using the data.frame() function
RPI_Weather_Week
head(RPI_Weather_Week) # head of the data frame, NOTE: it will show only 6 rows, usually head() function shows the
str(RPI_Weather_Week) # we can take a look at the structure of the dataframe using the str() function.
summary(RPI_Weather_Week) # summary of the dataframe using the summary() function
RPI_Weather_Week[1,] # showing the 1st row and all the columns
RPI_Weather_Week[,1] # showing the 1st coulmn and all the rows
RPI_Weather_Week[,'snowed']
RPI_Weather_Week[,'days']
RPI_Weather_Week[,'temp']
RPI_Weather_Week[1:5,c("days","temp")]
RPI_Weather_Week[1:5,c("days","snowed")]
RPI_Weather_Week$temp
RPI_Weather_Week$snowed
subset(RPI_Weather_Week,subset=snowed==TRUE)
sorted.snowed <- order(RPI_Weather_Week['snowed'])
sorted.snowed
RPI_Weather_Week[sorted.snowed,]
sorted.snowed <- order(RPI_Weather_Week['snowed'])
sorted.snowed <- order(RPI_Weather_Week['snowed'])
View(RPI_Weather_Week)
View(RPI_Weather_Week)
sorted.snowed <- order(RPI_Weather_Week['snowed',])
sorted.snowed <- order(RPI_Weather_Week$snowed)
sorted.snowed
View(RPI_Weather_Week)
View(RPI_Weather_Week)
RPI_Weather_Week[sorted.snowed,]
dec.snow <- order(-RPI_Weather_Week$temp)
dec.snow
# Creating Dataframes
# creating an empty dataframe
empty.DataFrame <- data.frame()
empty.DataFrame
v1 <- 1:10
v1
letters
v2 <- letters[1:10]
v2
df <- data.frame(col_name.1 = v1,First10Letters = v2)
df
# importing data and exporting data
# writing to a CSV file:
write.csv(df,file = 'saved_df1_Section2.csv')
df_section2 <- read.csv('saved_df1_Section2.csv')
df_section2
nrow(df)
ncol(df)
dim(df)
colnames(df)
rownames(df)
str(df)
summary(df)
(mapping = aes(x = carat),
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = carat),
binwidth = 0.5)
source("C:/code/CSCI4600S24_Ziyue_Zhao/Lab1_part2/Exploratory_Data_Analysis.R", echo=TRUE)
+ geom_histogram(binwidth = 0.1)
smaller <- diamonds %>% filter(carat < 3)
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.1)
smaller <- diamonds %>% filter(carat < 3)
install.packages("magrittr") # package installations are only needed the first time you use it
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
diamonds %>% count(cut_width(carat, 0.5))
diamonds %>% count(cut_width(carat, 0.5))
smaller <- diamonds %>% filter(carat < 3)
smaller <- diamonds %>% filter(carat < 3)
install.packages("dplyr")
install.packages("dplyr")
ggplot(data = diamonds) +
## Explore the distribution of price.
summary(diamonds$price)
## Explore the distribution of price.
summary(diamonds$prices)
## Explore the distribution of price.
summary(diamonds$price)
## Explore the distribution of price.
summary(diamonds)
library(ggplot2)
library(magrittr)
library(dplyr)
source("C:/code/CSCI4600S24_Ziyue_Zhao/Lab1_part2/Exploratory_Data_Analysis.R", echo=TRUE)
## Explore the distribution of price.
summary(diamonds$price)
ggplot(data = diamonds, mapping = aes(x = diamonds$price)) +
geom_histogram(binwidth = 0.01)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 0.01)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 0.01)
## Explore the distribution of price.
summary(diamonds$price)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 0.1)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 0.5) +
coord_cartesian(ylim = c(0,50))
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 1) +
coord_cartesian(ylim = c(0,40))
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 1) +
coord_cartesian(ylim = c(0,50))
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 1) +
coord_cartesian(ylim = c(0,60))
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 1) +
coord_cartesian(ylim = c(0,70))
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 1)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 0.1)
View(data)
View(data)
View(data)
View(data)
## Explore the distribution of price.
summary(diamonds$price)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 1)
mode(diamonds$price)
most_common <- as.numeric(names(frequency_table[which.max(frequency_table)]))
## Explore the distribution of price.
summary(diamonds$price)
frequency_table <- table(as.vector(diamonds$price))
most_common <- as.numeric(names(frequency_table[which.max(frequency_table)]))
most_common
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 10)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 20)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 50)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 100)
num <- diamonds %>% filter(carat == 0.99)
num
length(num)
# 10 diamonds are 0.99 carat
num <- diamonds %>% filter(carat == 1.00)
length(num)
num <- diamonds %>% filter(carat == 0.99)
length(num)
# 10 diamonds are 0.99 carat
num <- diamonds %>% filter(carat == 1.00)
length(num)
# 10 diamonds are 0.99 carat
num <- diamonds %>% filter(carat == 1)
length(num)
num
num
dim(num)
dim(num)
filtered_df <- filter(diamonds, carat == 1)
dim(num)
filtered_df <- filter(diamonds, carat == 0.99)
dim(num)
dim(diamonds)
filtered_df <- filter(diamonds, carat == 0.99)
dim(diamonds)
filtered_df <- filter(diamonds, carat == 0.99)
dim(num)
num
dim(diamonds)
filtered_df <- filter(diamonds, carat == 0.99)
dim(num)
# 10 diamonds are 0.99 carat
num <- diamonds %>% filter(carat == 1)
dim(num)
num
dim(num)
View(num)
View(num)
filtered_df <- filter(diamonds, carat == 0.99)
dim(num)
View(filtered_df)
View(filtered_df)
View(num)
View(num)
dim(diamonds)
filtered_df <- filter(diamonds, carat == 0.99)
dim(num)
View(num)
View(num)
filtered_df <- diamonds %>% filter(carat == 0.99)
dim(num)
View(num)
View(num)
# 1558 diamonds are 0.99 carat
num <- diamonds %>% filter(carat == 1)
dim(num)
num <- filter(diamonds, abs(carat - 0.99) < tolerance)
dim(diamonds)
tolerance <- 0.0001
num <- filter(diamonds, abs(carat - 0.99) < tolerance)
dim(num)
# 1558 diamonds are 0.99 carat
num <- diamonds %>% filter(carat == 1)
dim(num)
?coord_cartesian
ggplot(diamonds) +
geom_histogram(mapping = aes(x = y),binwidth = 0.5) +
coord_cartesian(ylim = c(0,50))
?coord_cartesian
ggplot(diamonds) +
geom_histogram(mapping = aes(x = y),binwidth = 0.5) +
coord_cartesian(ylim = c(0,50),xlim = c(0,1000))
ggplot(diamonds) +
geom_histogram(mapping = aes(x = y),binwidth = 0.5) +
coord_cartesian(ylim = c(0,50),xlim = c(0,1000))
source("C:/code/CSCI4600S24_Ziyue_Zhao/Lab1_part2/Exploratory_Data_Analysis.R", echo=TRUE)
y <- 10
diamonds2 <- diamonds %>% filter(between(y, 3, 20))
diamonds2 <- diamonds %>% mutate(y = ifelse(y < 3 | y > 20, NA, y))
diamonds2 <- diamonds %>% filter(between(y, 3, 20))
diamonds2 <- diamonds %>% mutate(y = ifelse(y < 3 | y > 20, NA, y))
ggplot(data = diamonds2, mapping = aes(x = x, y = y)) + geom_point()
ggplot(data = diamonds2, mapping = aes(x = x, y = y)) + geom_point(na.rm = TRUE)
nycflights13::flights %>% mutate( cancelled =
is.na(dep_time), sched_hour =
sched_dep_time %/% 100, sched_min =
sched_dep_time %% 100, sched_dep_time =
sched_hour + sched_min / 60 ) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly( mapping = aes(color =
cancelled), binwidth = 1/4 )
nycflights13 <-flights %>% mutate( cancelled =
is.na(dep_time), sched_hour =
sched_dep_time %/% 100, sched_min =
sched_dep_time %% 100, sched_dep_time =
sched_hour + sched_min / 60 ) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly( mapping = aes(color =
cancelled), binwidth = 1/4 )
diamonds2 <- diamonds %>% filter(between(y, 3, 20))
diamonds2 <- diamonds %>% mutate(y = ifelse(y < 3 | y > 20, NA, y))
ggplot(data = diamonds2, mapping = aes(x = x, y = y)) + geom_point()
ggplot(data = diamonds2, mapping = aes(x = x, y = y)) + geom_point(na.rm = TRUE)
？mode
?mode
